-------{1} LACE DEBUGGER {0}-------
Available Commands:

    {1}help{0} (h)
        Show this message.

    {1}step{0} (t) {3}COUNT?{0}
        Execute next instruction or jump into subroutine.
          - {3}COUNT{0}: Integer (default: 1)

    {1}next{0} (n) {3}COUNT?{0}
        Execute next instruction or whole subroutine (including any nested
            subroutine calls).
          - {3}COUNT{0}: Integer (default: 1)

    {1}continue{0} (c)
        Continue execution until breakpoint or `HALT`.

    {1}finish{0} (f)
        Continue execution until end of subroutine, breakpoint, or `HALT`.

    {1}get{0} (g) {3}LOCATION{0}
        Print the value at a register, address, or label.
          - {3}LOCATION{0}: Register | Address+ | Label+

    {1}set{0} (s) {3}LOCATION VALUE{0}
        Set the value at a register, address, or label.
          - {3}LOCATION{0}: Register | Address+ | Label+
          - {3}VALUE{0}: Integer

    {1}jump{0} (j) {3}LOCATION{0}
        Unconditionally jump to an address/label.
          - {3}LOCATION{0}: Address+ | Label+

    {1}registers{0} (r)
        Print the value of all registers.

    {1}break add{0} (ba) {3}LOCATION?{0}
        Add breakpoint at an address/label/PC.
          - {3}LOCATION{0}: Address+ | Label+ (default: PC)

    {1}break remove{0} (br) {3}LOCATION?{0}
        Remove breakpoint at an address/label/PC.
          - {3}LOCATION{0}: Address+ | Label+ (default: PC)

    {1}break list{0} (bl)
        List all breakpoints.

    {1}reset{0}
        Reset all memory and registers to original state.

    {1}source{0} (s) {3}LOCATION?{0}
        Print corresponding line of source code from address/label/PC.
          - {3}LOCATION{0}: Address+ | Label+ (default: PC)

    {1}eval{0} (v)
        Simulate an instruction. Note that labels cannot be created or modified.
          - Instruction: OPCODE OPERANDS...

    {1}quit{0} (q)
        Stop debugger and continue execution as normal.

    {1}exit{0} (e)
        Exit debugger and simulator.

{1}Note:{0} Address+ and Label+ arguments can include an offset,
    eg. `HelloWorld+4`
